// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that recommends complementary jewelry items
 * based on the product the user is currently viewing.
 *
 * - getProductRecommendations - A function that handles the product recommendation process.
 * - ProductRecommendationInput - The input type for the getProductRecommendations function.
 * - ProductRecommendationOutput - The return type for the getProductRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ProductRecommendationInputSchema = z.object({
  productDescription: z
    .string()
    .describe('The description of the jewelry product being viewed.'),
  productCategory: z.string().describe('The category of the jewelry product.'),
  productImageUrl: z
    .string()
    .describe(
      'URL of the product image for context. This will help model to generate better recommendations.'
    ),
  userPreferences: z
    .string()
    .optional()
    .describe('Optional: The user profile and preferences, if available.'),
});
export type ProductRecommendationInput = z.infer<
  typeof ProductRecommendationInputSchema
>;

const ProductRecommendationOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      name: z.string().describe('The name of the recommended product.'),
      description: z.string().describe('A short description of the product.'),
      imageUrl: z.string().describe('URL of the recommended product image.'),
      category: z.string().describe('Category of the recommended product'),
    })
  ).describe('A list of recommended jewelry products.'),
});
export type ProductRecommendationOutput = z.infer<
  typeof ProductRecommendationOutputSchema
>;

export async function getProductRecommendations(
  input: ProductRecommendationInput
): Promise<ProductRecommendationOutput> {
  return productRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'productRecommendationPrompt',
  input: {schema: ProductRecommendationInputSchema},
  output: {schema: ProductRecommendationOutputSchema},
  prompt: `You are an expert jewelry consultant. A user is viewing a particular jewelry product and you should recommend other complementary products.

  Here is the description of the product they are viewing:
  Category: {{{productCategory}}}
  Description: {{{productDescription}}}
  Product Image: {{media url=productImageUrl}}

  {{#if userPreferences}}
  Here are the user's preferences, use them to tailor the recommendations:
  {{{userPreferences}}}
  {{/if}}

  Recommend other jewelry products that would complement the viewed product. Ensure variety in your recommendations.
  Return the recommendations in JSON format. Each recommendation must have name, description and imageUrl.
  The image URL should be a valid URL from the internet.
  Limit the recommendations to a maximum of 3 items.
  Avoid recommending the same product or very similar products.
`,
});

const productRecommendationFlow = ai.defineFlow(
  {
    name: 'productRecommendationFlow',
    inputSchema: ProductRecommendationInputSchema,
    outputSchema: ProductRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
